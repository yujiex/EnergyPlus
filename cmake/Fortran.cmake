add_library(fortran_project_options INTERFACE)
set(FORTRAN_STATIC_EXE FALSE)
set(FORTRAN_SKIP_RPATH FALSE)

if(APPLE)
  if(CMAKE_Fortran_COMPILER MATCHES "ifort")
    target_compile_options(fortran_project_options INTERFACE -fpp)
    target_compile_options(fortran_project_options INTERFACE -static-intel)
  else()
    if(NOT "Ninja" STREQUAL ${CMAKE_GENERATOR})
      target_compile_options(fortran_project_options INTERFACE -cpp)
    endif()
  endif()
elseif(UNIX)
  set(FORTRAN_SKIP_RPATH TRUE)
  if(CMAKE_Fortran_COMPILER MATCHES "ifort")
    target_compile_options(fortran_project_options INTERFACE -fpp)
    target_compile_options(fortran_project_options INTERFACE -static-intel)
  else()
    if(NOT "Ninja" STREQUAL ${CMAKE_GENERATOR})
      target_compile_options(fortran_project_options INTERFACE -cpp)
    endif()
    target_compile_options(fortran_project_options INTERFACE -static)
    set(FORTRAN_STATIC_EXE TRUE)
  endif()
else() # Windows
  set(FORTRAN_STATIC_EXE TRUE)
  if(CMAKE_Fortran_COMPILER MATCHES "ifort")
    # Set release flags to be empty
    set(CMAKE_Fortran_FLAGS_RELEASE "")
    target_compile_options(fortran_project_options INTERFACE /libs:static)
    target_compile_options(fortran_project_options INTERFACE /fpp)
  else()
    target_compile_options(fortran_project_options INTERFACE -static)
    if(NOT "Ninja" STREQUAL ${CMAKE_GENERATOR})
      target_compile_options(fortran_project_options INTERFACE -cpp)
    endif()
  endif()
endif()
target_compile_options(fortran_project_options INTERFACE -ffree-line-length-275)
